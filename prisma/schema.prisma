// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["config"]
}

model Bank {
  code     String @id
  name     String

  @@schema("config")
}

model Merchant {
  id                 Int       @id @default(autoincrement())
  settlementInterval Int       @default(120) // in minutes like 30, 60, 120 or 0 for bypass interval 30
  lastSettlementAt   DateTime?

  merchantFees     MerchantFee[]
  AgentShareholder AgentShareholder[]

  @@schema("config")
}

model Agent {
  id Int @id

  AgentShareholders AgentShareholder[]

  @@schema("config")
}

model AgentShareholder {
  id         Int      @id @default(autoincrement())
  agentId    Int
  agent      Agent    @relation(fields: [agentId], references: [id])
  merchantId Int
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  percentagePerAgent Decimal

  @@unique([agentId, merchantId])
  @@schema("config")
}

// -- 1. Provider
model Provider {
  // id        Int      @id @default(autoincrement())
  // code      String   @unique
  name String @id

  reconciliationTime   String //format: '02:00' (HH:mm)
  lastReconciliationAt DateTime?

  baseFees BaseFee[]

  @@schema("config")
}

// -- 2. Payment Method
model PaymentMethod {
  // id        Int      @id @default(autoincrement())
  name             String                @id
  explain          String
  transactionTypes TransactionTypeEnum[]

  baseFees BaseFee[]

  @@schema("config")
}

// -- 4. Base Fee Config (default: hanya fee provider)
model BaseFee {
  id                Int                 @id @default(autoincrement())
  code              String              @unique // PROVIDER_PAYMENTMETHOD_TRANSACTIONTYPE => format
  providerName      String
  paymentMethodName String
  transactionType   TransactionTypeEnum

  feeProviderFixed      Decimal @default(0.0) @db.Decimal(10, 4)
  feeProviderPercentage Decimal @default(0.0) @db.Decimal(10, 4)

  isActive Boolean @default(true)

  provider      Provider      @relation(fields: [providerName], references: [name])
  paymentMethod PaymentMethod @relation(fields: [paymentMethodName], references: [name])

  merchantFees MerchantFee[]

  @@schema("config")
}

// -- 5. Merchant Fee Config (override internal & agent fee per merchant)
model MerchantFee {
  id         Int @id @default(autoincrement())
  merchantId Int
  baseFeeId  Int

  feeInternalFixed      Decimal @default(0.0) @db.Decimal(10, 4)
  feeInternalPercentage Decimal @default(0.0) @db.Decimal(10, 4)

  feeAgentFixed      Decimal @default(0.0) @db.Decimal(10, 4)
  feeAgentPercentage Decimal @default(0.0) @db.Decimal(10, 4)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  merchant Merchant @relation(fields: [merchantId], references: [id])
  baseFee  BaseFee  @relation(fields: [baseFeeId], references: [id])

  @@unique([merchantId, baseFeeId])
  @@schema("config")
}

model Common {
  id       Int     @id @default(autoincrement())
  div      String
  value    String
  isActive Boolean
  explain  String

  @@schema("config")
}

enum TransactionTypeEnum {
  WITHDRAW
  TOPUP
  DISBURSEMENT
  PURCHASE

  @@schema("config")
}
