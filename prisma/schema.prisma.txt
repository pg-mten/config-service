// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["config"]
}

model Agent {
  id Int @id

  name String

  AgentShareholders AgentShareholder[]

  @@schema("config")
}

model AgentShareholder {
  id         Int      @id @default(autoincrement())
  agentId    Int
  agent      Agent    @relation(fields: [agentId], references: [id])
  merchantId Int
  merchant   Merchant @relation(fields: [merchantId], references: [id])

  percentagePerAgent Decimal

  @@unique([agentId, merchantId])
  @@schema("config")
}

// Addon Modal (ALL)
model AgentFee {
  id            Int         @id @default(autoincrement())
  merchantId    Int
  merchant      Merchant    @relation(fields: [merchantId], references: [id])
  internalFeeId Int
  internalFee   InternalFee @relation(fields: [internalFeeId], references: [id])

  percentageForAgent Decimal?

  @@unique([merchantId, internalFeeId])
  @@schema("config")
}

model Merchant {
  id Int @id

  name               String
  settlementInterval Int       @default(120) // in minutes like 30, 60, 120 or 0 for bypass interval 30
  lastSettlementAt   DateTime?

  AgentShareholders AgentShareholder[]
  AgentFee          AgentFee[]

  @@schema("config")
}

model Provider {
  name String @id

  ProviderFee          ProviderFee[]
  reconciliationTime   String //format: '02:00' (HH:mm)
  lastReconciliationAt DateTime?

  @@schema("config")
}

// Modal
model ProviderFee {
  id                Int           @id @default(autoincrement())
  providerName      String
  provider          Provider      @relation(fields: [providerName], references: [name])
  paymentMethodName String
  paymentMethod     PaymentMethod @relation(fields: [paymentMethodName], references: [name])

  percentageProvider Decimal

  InternalFee InternalFee[]

  @@unique([providerName, paymentMethodName])
  @@schema("config")
}

model PaymentMethod {
  name String @id

  ProviderFee ProviderFee[]

  @@schema("config")
}

// Margin PG
model InternalFee {
  id            Int         @id @default(autoincrement())
  providerFeeId Int         @unique
  providerFee   ProviderFee @relation(fields: [providerFeeId], references: [id])

  percentageInternal Decimal

  AgentFee AgentFee[]

  @@schema("config")
}

model Common {
  id       Int     @id @default(autoincrement())
  div      String
  value    String
  isActive Boolean @default(true)
  explain  String

  @@schema("config")
}
